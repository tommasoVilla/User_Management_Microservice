import hashlib
import os
import binascii
import boto3
from botocore.exceptions import ClientError

from user import User


class UserRepositoryException(Exception):
    """
    This exception is raised when an error is encountered while interacting with the data store
    containing information about users.
    """
    pass


class UserDAO:
    """
    The UserDAO class is responsible to handle the interaction with the data store containing
    information about users.
    """

    @staticmethod
    def add_user(user):

        """
        Insert an user in the data store.
        :param user: The user to be added to the data store
        :return: True, if the registration completes successfully, False if the username provided
                 already exists in the data store.
        """
        # The data store maintains hashed passwords
        hashed_password = UserDAO.hash_password(user.password)

        try:
            dynamodb = boto3.resource('dynamodb', region_name=os.getenv('AWS_REGION', 'us-east-1'))
            table = dynamodb.Table('Users')

            table.put_item(
                Item={
                    'Name': user.name,
                    'Surname': user.surname,
                    'Username': user.username,
                    'Password': hashed_password,
                    'Type': user.type
                },
                # to trigger an error in case of duplicate username
                ConditionExpression="attribute_not_exists(Username)"
            )
            # The returning password is encoded using an hash function
            user.password = hashed_password
            return True

        except ClientError as e:
            if e.response['Error']['Code'] == "ConditionalCheckFailedException":
                return False
            else:
                raise UserRepositoryException()

    @staticmethod
    def find_user_by_username_and_password(username, password):
        """
        Find user by username and password in data store
        :param username: the username of the user to find
        :param password: the password of the user to find
        :return: The user found, None otherwise
        """
        try:
            dynamodb = boto3.resource('dynamodb', region_name=os.getenv('AWS_REGION', 'us-east-1'))
            table = dynamodb.Table('Users')

            response = table.get_item(Key={'Username': username})
            if 'Item' not in response:
                return None

            user_dict = response['Item']

            if not UserDAO.verify_password(password, user_dict['Password']):
                return None

            user = User()
            user.from_dict(user_dict)
            return user

        except ClientError:
            raise UserRepositoryException()

    @staticmethod
    def hash_password(password):
        """
        Generate a string representing the hash of the given password concatenated with a salt. The salt is a random
        string used to ensure same passwords have different hashing. Hashed salt is always 64 bytes long.
        :param password: The password string to hash
        :return: The hashed string for given password
        """
        # The salt is obtained encoding in ascii the hexadecimal representation of 60 random byte from os
        salt = hashlib.sha256(os.urandom(60)).hexdigest().encode('ascii')
        password_hash = hashlib.pbkdf2_hmac('sha512', password.encode('utf-8'), salt, 1000)
        # Hashed Password and salt are converted in a string containing
        # hexadecimal representation of previous generated bytes
        password_hash = binascii.hexlify(password_hash)
        # The salt is concatenated at the beginning of the hashed password to repeat the hashing and verify the password
        return (salt + password_hash).decode('ascii')

    @staticmethod
    def verify_password(inserted_password, stored_password):
        """
        Verify the password inserted by the user is correct.
        :param inserted_password: The password inserted by user
        :param stored_password:  The password maintained in the data store
        :return: True if the passwords match, False otherwise.
        """
        salt = stored_password[:64]
        stored_password = stored_password[64:]
        password_hash = hashlib.pbkdf2_hmac('sha512', inserted_password.encode('utf-8'), salt.encode('ascii'), 1000)
        password_hash = binascii.hexlify(password_hash).decode('ascii')
        return password_hash == stored_password
